---
- name: Luanch EC2 Instances ## It is play name 
  hosts: local ## Bascially Ansible will run this playbook on ansible control node itself
  connection: local   ## It means Ansbile will use local connnection not ssh
  vars_files:
    - secrets.yaml ## it will be used for access variables in to playbook 
  tasks:              ## So It is tasks section to be executed 
     - name: EC2 Provisioning for Webserver ## It is task name
       amazon.aws.ec2_instance:   ##It is module name for EC2 provision
          name: "Web Server"
          region: ap-south-1 
          image_id:  ami-0f918f7e67a3323f0
          instance_type: t2.micro
          key_name: "{{key_name}}"
          security_group: "{{security_group}}"
          vpc_subnet_id: ##put subnet id accordingly your region & Zone
          network_interfaces:
              - assign_public_ip: true
          tags:
           Role: web
          state: present
       register: web_result
     - name: EC2 Provisioning for Data Base server ## It is task name
       amazon.aws.ec2_instance:   ##It is module name for EC2 provision
          name: "DB Server"
          region: ap-south-1
          image_id:  ami-0f918f7e67a3323f0
          instance_type: t2.micro
          key_name: "{{key_name}}"
          security_group: "{{security_group}}"
          vpc_subnet_id: ##put subnet id accordingly your region & Zone 
          network_interfaces:
              - assign_public_ip: true
          tags:
           Role: db
          state: present
       register: db_result
     - name: EC2 Provisioning for App Server ## It is task name
       amazon.aws.ec2_instance:   ##It is module name for EC2 provision
          name: "App Server"
          region: ap-south-1
          image_id:  ami-0f918f7e67a3323f0
          instance_type: t2.micro
          key_name: "{{key_name}}"
          security_group: "{{security_group}}"
          vpc_subnet_id: ##put subnet id accordingly your region & Zone
          network_interfaces:
              - assign_public_ip: true
          tags:
           Role: app
          state: present
       register: app_result
     - name: add all public ips to dynamically webserver group
       add_host: hostname={{item.network_interfaces[0].association.public_ip}} groups=webserver
       loop: "{{web_result.instances}}"
     - name: add all public ips to dynamically dbserver group
       add_host: hostname={{item.network_interfaces[0].association.public_ip}} groups=dbserver
       loop: "{{db_result.instances}}"
     - name: add all public ips to dynamically appserver group
       add_host: hostname={{item.network_interfaces[0].association.public_ip}} groups=appserver
       loop: "{{app_result.instances}}"
- name: Configure webserver
  hosts: webserver
  remote_user: ubuntu
  become: yes
  vars_files:
    secrets.yaml
  tasks:
     - name: Install apache2 package
       apt:
        name: apache2
        state: present
        update_cache: yes
     - name: Start apache2 service
       service:
           name: apache2
           state: started
     - name: To verify apache2 package installed
       shell: dpkg -l | grep apache2
       register: apache2_check
     - debug:
         msg:  "{{apache2_check.stdout_lines}}" 
- name: Configure db server
  hosts: dbserver
  remote_user: ubuntu
  become: yes
  vars_files:
    secrets.yaml
  tasks:
   - name: Install db server package mysql
     apt:
      name: mysql-server
      state: present
      update_cache: yes
   - name: To verify database package installed
     shell: dpkg -l | grep mysql-server
     register: mysql_check
   - debug:
         msg: "{{mysql_check.stdout_lines}}"
- name: Configure app server(but this time only install python packages)
  hosts: appserver
  remote_user: ubuntu
  become: yes
  vars_files:
    secrets.yaml
  tasks:
     - name: Install python3 & Python3-pip package
       apt:
         update_cache: yes
         name: 
           - python3
           - python3-pip 
         state: present         
      
     - name: To verify python3-pip package installed
       shell: dpkg -l | grep python3-pip
       register: python3_check
     - debug:
         msg:  "{{python3_check.stdout_lines}}"
